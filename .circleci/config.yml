version: 2.1 # 2.1 config required to use orbs

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2 # use the AWS ECR orb
  aws-ecs: circleci/aws-ecs@3.2.0 # use the AWS ECS orb
  aws-cli: circleci/aws-cli@3.1.1 # use the AWS CLI orb

jobs:
  # build:
  #   docker:
  #     # specify the version you desire here
  #     - image: cimg/node:16.10 

  #     # Specify service dependencies here if necessary
  #     # CircleCI maintains a library of pre-built images
  #     # documented at https://circleci.com/docs/2.0/circleci-images/

  #   working_directory: ~/repo

  #   steps:
  #     - checkout

  #     # Download and cache dependencies
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "package.json" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v1-dependencies-

  #     - run: npm install
  #     - save_cache:
  #         paths:
  #           - node_modules
  #         key: v1-dependencies-{{ checksum "package.json" }}
  # aws-ecr/build-and-push-image:
  #   docker: # Specify executor for running build job - this example uses a Docker container
  #     - image: cimg/node:16.10 # Specify docker image to use
  #       auth:
  #           username: $DOCKER_LOGIN 
  #           password: $DOCKER_PASSWORD  # context / project UI env-var reference
  #                          # build job steps omitted for brevity
  #   steps:
    
  #     - run:
  #         name: Authentification Client setup_remote_docker
  #         command: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 260248989732.dkr.ecr.us-east-1.amazonaws.com
  #     - run: 
  #         name: Build the image
  #         command: docker build -t my-angular-app .
  #     - run:
  #         name: Tag the image
  #         command: docker tag my-angular-app:latest 260248989732.dkr.ecr.us-east-1.amazonaws.com/myapp:latest
  #     - run: 
  #         name: Push The image to AWS ECR
  #         command: docker push 260248989732.dkr.ecr.us-east-1.amazonaws.com/my-angular-app:latest
  verify-deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_DEFAULT_REGION
      - run:
          name: Get last task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition ${MY_APP_PREFIX}-service \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
            "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          family: '${MY_APP_PREFIX}-service'
          cluster: '${MY_APP_PREFIX}-cluster'
          task-definition-arn: '${TASK_DEFINITION_ARN}'

workflows:
  build-and-deploy:
    jobs:
      # - build
      - aws-ecr/build-and-push-image: # orb built-in job
          # requires:
          #   - build
          repo: '${MY_APP_PREFIX}'
          tag: '${CIRCLE_SHA1}'
          # account-url: AWS_ACCOUNT_ID
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: "Dockerfile"
          region: AWS_REGION
      - aws-ecs/deploy-service-update: # orb built-in job
          requires:
            - aws-ecr/build-and-push-image
          family: '${MY_APP_PREFIX}-service'
          cluster: '${MY_APP_PREFIX}-cluster'
          container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
      - verify-deployment:
          requires:
            - aws-ecs/deploy-service-update





# version: 2.1

# workflows: # Define a Workflow running the build job, then the deploy job
#   build-deploy:
#     jobs:
#         # - build
#         - deploy:
#             # requires:
#             # - build
#             filters:
#               branches:
#                 only: main # Only deploys when the commit is on the Main branch

# jobs:
#   build:
#     docker: # Specify executor for running build job - this example uses a Docker container
#       - image: cimg/node:16.10 # Specify docker image to use
#         auth:
#             username: $DOCKER_LOGIN 
#             password: $DOCKER_PASSWORD  # context / project UI env-var reference
#                            # build job steps omitted for brevity
#     steps:
    
#       - run: 
#           name: Build the image
#           command: docker build -t my-angular-app .
#       - run:
#           name: Tag the image
#           command: docker tag my-angular-app $DOCKER_LOGIN/my-angular-app
#       - run: 
#           name: Push The image to Docker Hub
#           command: docker push $DOCKER_LOGIN/my-angular-app
#   deploy:
#     docker: # Specify executor for running deploy job
#         - image: my-angular-app:latest # Specify docker image to use
#           auth:
#             username: $DOCKER_LOGIN
#             password: $DOCKER_PASSWORD  # context / project UI env-var reference
#     steps:
#         - run: # Install the AWS CLI if it is not already included in the docker image
#             name: Install awscli
#             command: sudo pip install awscli
#         - run: # Deploy to S3 using the sync command
#             name: Deploy to S3
#             command: aws s3 sync D:\Master2\Workspace memoire\prj\dist s3://mybucket/myproject



# version: 2.1
# orbs:
#   terraform: circleci/terraform@3.1
# workflows:
#   deploy_infrastructure:
#     jobs:
#       - build
#       - terraform/fmt:
#           checkout: true
#           context: terraform
#           requires:
#             - build
#       - terraform/validate:
#           checkout: true
#           context: terraform
#           requires:
#             - terraform/fmt
#       - terraform/plan:
#           checkout: true
#           context: terraform
#           persist-workspace: true
#           requires:
#             - terraform/validate
#       - terraform/apply:
#           attach-workspace: true
#           context: terraform
#           filters:
#             branches:
#               only: main
#           requires:
#             - terraform/plan
#       - deploy-app:
#           context: terraform
#           requires:
#             - terraform/apply

# jobs:
#   build:
#     docker:
#       - image: cimg/node:16.10
#     # parallelism: 4
#     steps:
#       - setup_remote_docker:
#           version: 20.10.14
#       - checkout
#       - run: npm install
#       - run: npm run build
  
#   test:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - attach_workspace:
#           at: .
#       - checkout
#       - run: npm run test
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   packages:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#       - run: docker build -t my-angular-app .
#       - run: docker tag my-angular-app $DOCKER_LOGIN/my-angular-app
#       - run: docker push $DOCKER_LOGIN/my-angular-app

#   terraform/fmt:
#     docker:
#       - image: hashicorp/terraform:latest
#     steps:
#       - run: terraform fmt -check=true -diff=true
#   terraform/validate:
#     docker:
#       - image: hashicorp/terraform:latest
#     steps:
#       - run: terraform validate
#   terraform/plan:
#     docker:
#       - image: hashicorp/terraform:latest
#     steps:
#       - run: terraform plan
#   terraform/apply:
#     docker:
#       - image: hashicorp/terraform:latest
#     steps:
#       - run: terraform apply

#   deploy-app:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - run: ssh -i ~/projet/pk_UBUNTU.pem terraform@$EC2_PUBLIC_IP "docker stack deploy -c ~/project/docker-compose.yml my-angular-app"


# version: 2.1
# # orbs:
# #   docker: circleci/docker@1.4.0
# #   swarmpit: topmonks/swarmpit@1.0.0
# workflows:
#   build-and-provision:
#     jobs:
#       - build
#       - deploy-to-swarm:
#           requires:
#             - build
# jobs:
#   build:
#     docker:
#       - image: cimg/node:16.10
#         # auth:
#         #     username: seckndanane
#         #     password: Babacar98
#     steps:
#       - setup_remote_docker:
#           version: 20.10.14
#       - checkout
#       - run: npm install
#       - run: npm run build
#       # - run: npm test --watch=false
#       - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#       - run: docker build -t my-angular-app .
#       - run: docker tag my-angular-app $DOCKER_LOGIN/my-angular-app
#       - run: docker push $DOCKER_LOGIN/my-angular-app
#   deploy-to-swarm:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - checkout
#       - setup_remote_docker:
#           version: 20.10.14
#       - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#       - run: docker swarm init
#       - run: docker stack deploy -c ~/project/docker-compose.yml --with-registry-auth my-angular-app


  #   executor: kubernetes
  #   steps:
  #     - run: helm init --client-only
  #     - run: helm upgrade --install my-angular-app --set image.repository=$DOCKER_LOGIN/my-angular-app --namespace my-namespace charts/my-angular-app

  # provision:
  #   docker:
  #     - image: cimg/node:16.10
  #   steps:
  #     - setup_remote_docker:
  #         version: 20.10.14
  #     - run: wget https://releases.hashicorp.com/terraform/0.14.8/terraform_0.14.8_linux_amd64.zip
  #     - run: unzip terraform_0.14.8_linux_amd64.zip -d /usr/local/bin/
  #     - run: terraform init
  #     - run: terraform apply -auto-approve
  # export:
  #   steps:
  #     - run: export DEPLOYMENT_URL=$(terraform output deployment_url)
  # deploy:
  #   steps:
  #     - run: terraform import vercel_deployment.example $DEPLOYMENT_URL
  #     - run: terraform apply -var "vercel_token=${VERCEL_TOKEN}" -auto-approve
  #   requires:
  #     - build
  #     - provision
  #     - export
  # deploy:
  #   docker:
  #     - image: cimg/node:16.10
  #   steps:
  #     - run:
  #         name: Connect to Play with Docker via SSH
  #         command: |
  #           # Get the public IP address of the Play with Docker node
  #           #export PWD_IP=$(ip a | grep 'inet ' | cut -d' ' -f6 | cut -d/ -f1)
  #           export PWD_IP=192.168.0.7
  #           # Connect to the Play with Docker node via SSH
  #           ssh ip172-18-0-94-cere7ov91rrg00cdnimg
  #     - run:
  #         name: Deploy to Play with Docker
  #         command: |
  #           #Deploy the Docker image to the Play with Docker node
  #           docker run -p 8080:80 seckndanane/my-angular-app
  #     - run:
  #         name: Check deployment
  #         command: |
  #           # Check if the deployment was successful by accessing the application through the public IP address
  #           curl http://$PWD_IP:8080
      # terraform-deploy:
  #   docker:
  #     - image: hashicorp/terraform-k8s
  #   steps:
  #     - checkout
  #     - run: terraform init
  #     - run: terraform plan
  #     - run: terraform apply


# #This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
# version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/2.0/orb-intro/
# orbs:
#   node: circleci/node@4.7

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - node/test:
#           # This is the node version to use for the `cimg/node` tag
#           # Relevant tags can be found on the CircleCI Developer Hub
#           # https://circleci.com/developer/images/image/cimg/node
#           version: '16.10'
#           # If you are using yarn, change the line below from "npm" to "yarn"
#           pkg-manager: npm
# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: node:latest
#     steps:
#       - checkout
#       - run: npm install
#       # - run: npm test
#       - run: npm run build




# version: 2.1

# jobs:
#   build:
#     steps:
#       - run:
#           name: Build and push Docker image
#           command: |
#             docker build -t my-image .
#             docker push my-image
#   deploy:
#     steps:
#       - run:
#           name: Deploy to Kubernetes
#           command: |
#             kubectl set image deployment/my-deployment my-container=my-image




# version: 2.1
# orbs:
#   browser-tools: circleci/browser-tools@1.2.3
# jobs:
#   build:
#     working_directory: ~/ng-project
#     docker:
#       - image: cimg/node:16.13.1-browsers
#     steps:
#       - browser-tools/install-chrome
#       - browser-tools/install-chromedriver
#       - run:
#           command: |
#             google-chrome --version
#             chromedriver --version
#           name: Check install
#       - checkout
#       - restore_cache:
#           key: ng-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
#       - run: npm install
#       - save_cache:
#           key: ng-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
#           paths:
#             - "node_modules"
#       - run: npm run build
#       # - run: npm run test