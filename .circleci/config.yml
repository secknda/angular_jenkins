version: 2.1
# orbs:
#   docker: circleci/docker@1.4.0
#   swarmpit: topmonks/swarmpit@1.0.0
workflows:
  build-and-provision:
    jobs:
      - build
      - deploy-to-swarm
          # requires:
          #   - build
jobs:
  build:
    docker:
      - image: cimg/node:16.10
        # auth:
        #     username: seckndanane
        #     password: Babacar98
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - checkout
      - run: npm install
      - run: npm run build
      # - run: npm test --watch=false
      - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - run: docker build -t my-angular-app .
      - run: docker tag my-angular-app $DOCKER_LOGIN/my-angular-app
      - run: docker push $DOCKER_LOGIN/my-angular-app
  deploy-to-swarm:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - run: docker stack deploy -c ../app_jenkins/docker-compose.yml my-angular-app


  #   executor: kubernetes
  #   steps:
  #     - run: helm init --client-only
  #     - run: helm upgrade --install my-angular-app --set image.repository=$DOCKER_LOGIN/my-angular-app --namespace my-namespace charts/my-angular-app

  # provision:
  #   docker:
  #     - image: cimg/node:16.10
  #   steps:
  #     - setup_remote_docker:
  #         version: 20.10.14
  #     - run: wget https://releases.hashicorp.com/terraform/0.14.8/terraform_0.14.8_linux_amd64.zip
  #     - run: unzip terraform_0.14.8_linux_amd64.zip -d /usr/local/bin/
  #     - run: terraform init
  #     - run: terraform apply -auto-approve
  # export:
  #   steps:
  #     - run: export DEPLOYMENT_URL=$(terraform output deployment_url)
  # deploy:
  #   steps:
  #     - run: terraform import vercel_deployment.example $DEPLOYMENT_URL
  #     - run: terraform apply -var "vercel_token=${VERCEL_TOKEN}" -auto-approve
  #   requires:
  #     - build
  #     - provision
  #     - export
  # deploy:
  #   docker:
  #     - image: cimg/node:16.10
  #   steps:
  #     - run:
  #         name: Connect to Play with Docker via SSH
  #         command: |
  #           # Get the public IP address of the Play with Docker node
  #           #export PWD_IP=$(ip a | grep 'inet ' | cut -d' ' -f6 | cut -d/ -f1)
  #           export PWD_IP=192.168.0.7
  #           # Connect to the Play with Docker node via SSH
  #           ssh ip172-18-0-94-cere7ov91rrg00cdnimg
  #     - run:
  #         name: Deploy to Play with Docker
  #         command: |
  #           #Deploy the Docker image to the Play with Docker node
  #           docker run -p 8080:80 seckndanane/my-angular-app
  #     - run:
  #         name: Check deployment
  #         command: |
  #           # Check if the deployment was successful by accessing the application through the public IP address
  #           curl http://$PWD_IP:8080
      # terraform-deploy:
  #   docker:
  #     - image: hashicorp/terraform-k8s
  #   steps:
  #     - checkout
  #     - run: terraform init
  #     - run: terraform plan
  #     - run: terraform apply


# #This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
# version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/2.0/orb-intro/
# orbs:
#   node: circleci/node@4.7

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - node/test:
#           # This is the node version to use for the `cimg/node` tag
#           # Relevant tags can be found on the CircleCI Developer Hub
#           # https://circleci.com/developer/images/image/cimg/node
#           version: '16.10'
#           # If you are using yarn, change the line below from "npm" to "yarn"
#           pkg-manager: npm
# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: node:latest
#     steps:
#       - checkout
#       - run: npm install
#       # - run: npm test
#       - run: npm run build




# version: 2.1

# jobs:
#   build:
#     steps:
#       - run:
#           name: Build and push Docker image
#           command: |
#             docker build -t my-image .
#             docker push my-image
#   deploy:
#     steps:
#       - run:
#           name: Deploy to Kubernetes
#           command: |
#             kubectl set image deployment/my-deployment my-container=my-image




# version: 2.1
# orbs:
#   browser-tools: circleci/browser-tools@1.2.3
# jobs:
#   build:
#     working_directory: ~/ng-project
#     docker:
#       - image: cimg/node:16.13.1-browsers
#     steps:
#       - browser-tools/install-chrome
#       - browser-tools/install-chromedriver
#       - run:
#           command: |
#             google-chrome --version
#             chromedriver --version
#           name: Check install
#       - checkout
#       - restore_cache:
#           key: ng-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
#       - run: npm install
#       - save_cache:
#           key: ng-project-{{ .Branch }}-{{ checksum "package-lock.json" }}
#           paths:
#             - "node_modules"
#       - run: npm run build
#       # - run: npm run test